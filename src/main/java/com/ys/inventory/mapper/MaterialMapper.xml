<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ys.inventory.mapper.MaterialMapper">
    <resultMap id="BaseResultMap" type="com.ys.inventory.entity.Material">
        <id column="material_id" jdbcType="VARCHAR" property="materialId"/>
        <result column="material_name" jdbcType="VARCHAR" property="materialName"/>
        <result column="material_num" jdbcType="DECIMAL" property="materialNum"/>
        <result column="create_time" jdbcType="BIGINT" property="createTime"/>
        <result column="update_time" jdbcType="BIGINT" property="updateTime"/>
        <result column="create_user" jdbcType="VARCHAR" property="createUser"/>
    </resultMap>
    <insert id="insert" parameterType="Material">
        insert into material (
            material_id,
            material_name,
            material_num,
            material_description,
            create_time,
            create_user,
            update_time,
            update_user,
            delete_flag
            ) values (
            #{materialId},
            #{materialName},
            #{materialNum},
            #{materialDescription},
            now(),
            #{createUser},
            now(),
            #{createUser},
            '0'
            )
    </insert>


    <insert id="insertBatch" parameterType="java.util.List">
        replace into material (
        material_id,
        material_name,
        material_num,
        material_description,
        create_time,
        create_user,
        update_time,
        update_user,
        delete_flag
        )
        values
        <foreach item="st" collection="list" open="" separator="," close="">
            (
            #{materialId},
            #{materialName},
            #{materialNum},
            #{materialDescription},
            now(),
            #{createUser},
            now(),
            #{createUser},
            '0'
            )
        </foreach>
    </insert>

    <update id="updateMaterial" parameterType="Material">
        update material
        <set>
            <if test="materialName != null and materialName.length > 0">
                material_name=#{materialName},
            </if>
            <if test="materialNum != null">
                material_num=#{materialNum},
            </if>
            <if test="materialDescription != null and materialDescription.length > 0">
                material_description=#{materialDescription},
            </if>
            update_time = now(),
            update_user = #{updateUser}
        </set>
        where material_id = #{materialId}
    </update>
    <select id="get" parameterType="String" resultType="Material">
    select
      m.material_id,
      m.material_name,
      m.material_num,
      m.material_description,
      m.create_time,
      (select u.user_name from user u where u.user_id = m.create_user) create_user,
      m.update_time,
      m.update_user,
      u.user_name
    from material m LEFT JOIN user u ON m.create_user = u.user_id
    where
      material_id = #{materialId}
      AND m.delete_flag = '0'
    </select>

    <update id="delete" parameterType="map">
        update material
        set delete_flag = '1',
        update_time = now(),
        update_user = #{updateUser}
        where
        delete_flag = '0'
        and material_id = #{materialId}
    </update>

    <select id="find" resultType="Material">
        select material_id, material_name, material_num, create_time,
        (select u.user_name from user u where u.user_id = create_user) create_user,
        update_time,update_user
        from material
        where delete_flag = '0'
        <if test="materialName !=null">
            and material_name like concat('%', #{materialName},'%')
        </if>
        order by create_time desc
    </select>

    <select id="getMaterialByName" parameterType="map" resultType="Material">
        select
        material_id,
        material_name,
        material_num,
        material_description,
        create_time,
        (select u.user_name from user u where u.user_id = create_user) create_user,
        update_time
        from material
        where
        <if test="materialId == null">
            material_name = #{materialName} and delete_flag = '0'
        </if>
        <if test="materialId != null">
            material_name = #{materialName} and material_id !=#{materialId} and delete_flag = '0'
        </if>

    </select>

    <select id="getMaterialNumberByMaterialId" parameterType="string" resultType="decimal">
        select
        material_num
        from material
        where material_id =#{materialId}
    </select>
</mapper>